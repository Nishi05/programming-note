//Food_with開発のメモ
// alt + optionが効かなくなったらIDEのプラグイン(Flutter+Dart)をアップグレードする
// Android Studio <- AS
// < <-Widget Classに添付する
// AS console に表示させるためには　debugPrint() [print()でも可]
/// <- 大まかなカテゴリーわけ

///基本知識
<MaterialApp Class
MaterialApp (
  //アプリ全体のテーマ（カラーなど）を決められる
  theme: ThemeData(
    brightness: Brightness.dark,
    primaryColor: Colors.blueGrey
  ),
  //初期画面を設定
  routes: Routes.route()
  //Navigator.of(context).pushNamed('settings.name')で画面遷移を指定できるように設定
  onGenerateRoute: (settings) => Routes.onGenerateRoute(settings),
)

class Routes {
  //初期ルートを設定
  static dynamic route() {
    return {'/': (BuildContext context) => PlanPage()};
  }
  //switch文で画面遷移を管理
  static Route onGenerateRoute(RouteSettings settings) {
    debugPrint(settings.name);
    switch (settings.name) {
      case "CreatePlan":
        return MaterialPageRoute(
           builder: (context) => ComposePlanPage(),
           //指定することにより下から上に画面がフルスクリーンで出てくる
           fullscreenDialog: true,
         );
    }
  }
}

<Container Class
Container(
  //子要素の配置を揃えることができる
  alignment: Alignment.center,
);

<Row Class
//横並び
Row(
  //横の配置指定 start center end
  mainAxisAlignment: MainAxisAlignment.start,
  //縦の配置指定 start center end
  crossAxisAlignment: CrossAxisAlignment.start,
);
<Column Class
//縦並び
Column(
  //縦の配置指定 start center end
  mainAxisAlignment: MainAxisAlignment.start,
  //横の配置指定 start center end
  crossAxisAlignment: CrossAxisAlignment.start,
);

<Text Class
//テキスト
Text(
//表示するテキスト
'',
//スタイルを変更できる
style: TextStyle(
color:
fontWight:
ext...
);

);
///Plan Widget　のデザイン決め
<Card Class
Card(
  // タップした時に指定した色の波紋がでる
  child: InkWell(
    splashColor: Colors.red,
    onTap: () {
      print('Card tapped.');
    },
    //子要素にContainerなどをつけてデザインする
    child: Container(
      width: 200,
      height: 100,
      child: Text('A card that can be tapped'),
    ),
  ),
);

<Expanded Class
//Row,Column内で使用するとExpanded内の子要素が固定の比率で表示される
Expanded ()

<Flexible Class
//Row,Column内で使用するとExpanded内の子要素が自身の幅に応じて柔軟な比率で表示される
Flexible ()

///Compose Plan Widget のデザイン決め
<SingleChildScrollView Class
//子要素が縦のデバイスの長さからはみ出した時にスクロールできるようになる。
SingleChildScrollView()
<Form Class
Form(
  //keyを指定してFormを識別する
  key: _formKey,
  child: Column()
);
//複数のField Widgetをグループ化できる。
<TextFormField Class
TextFormField(
  //fieldを装飾できる。
  decoration: const InputDecoration(
    icon: Icon(Icons.person),
    hintText: 'What do people call you?',
    labelText: 'Name *',
  ),
  //ボタンを押した時になどに使える
  onSaved: (String value) {
    // This optional block of code can be used to run
    // code when the user saves the form.
  },
  //バリデーションを指定できる
  validator: (String value) {
    return value.contains('@') ? 'Do not use the @ char.' : null;
  },
  //入力した値を随時監視できる　※ただし、StatefulWidgetで実装(2020/11/26)
  //検索フォームやログインフォームで使えそう
  onChanged: () =>,
)
<CupertinoDatePicker Class
CupertinoDatePicker(
  //時間や日付のみを選択できる dateAndTimeは年は出ない
  mode: CupertinoDatePickerMode.dateAndTime,
  //２４時間表記ができる
  use24hFormat: true,
  //年の設定できる
  minimumYear: 2019,
  maximumYear: 2021,
  //初期値の設定
  initialDateTime: DateTime.now(),
  //変更の検知
  onDateTimeChanged: (DateTime newDateTime) {
    // debugPrint(newDateTime);
  },
);
<showCupertinoModalPopup Class
//ios風の下からポップアップで表示できる
showCupertinoModalPopup(
  context: context,
  builder: (BuildContext context) {}
);
///状態管理
//hooks_riverpod, flutter_hooks
//widget間のstate（状態）管理を助ける。
//管理したいwidgetツリーの一番上部にProviderScopeをつける
ProviderScope(child: MyApp());
//context.read(hogeProvider)
//widgetで分離した時でも状態管理に参照できる

//flutter_state_notifier
//グローバル変数で宣言した時に初期値を入れるのがやりやすい。
//freezed コマンド
flutter pub run build_runner build --delete-conflicting-outputs


Text('${formState.dateTime}')

//CupertinoButton Class
//iOS風のボタン
CupertinoButton(
    minSize: 22.0,
    onPressed: _incrementCounter,
    color: Colors.blue,
    padding: EdgeInsets.fromLTRB(16.0, 0.0, 16.0, 0.0),
    child: Text("Hello", style: TextStyle(fontSize: 14.0, color: Colors.white)),
),
//Datetimeを比べる　isBefore or isAfter
var now = new DateTime.now();
var earlier = now.subtract(const Duration(seconds: 5));
assert(earlier.isBefore(now));

///データ管理（APIなど）
implements -> 関数の処理を実際に書く
abstract  -> 処理は書かずにimplementにある関数の名前のみを書く。

//data_source apiを直接叩く場所
//repository data_sourceを呼ぶ場所
なぜrepositoryの層を設けるのか？
->　data_sourceを切り分ける事によりローカルデータやモックデータを扱いたい時に切り分けが簡単になる。

//riverpodでfirestoreのplanデータを持ってくる流れ
1. data_sourceにAPIを叩くコードを書く
2. repositoryにdata_sourceを叩くコードを書く
3. view_modelでrepositoryを使って実際のデータを管理する
4.
//firestoreの知見
//FirebaseFireStore.instance
<- firestoreを扱うときの最初の宣言

//FirebaseFireStore.instance.collection("collectionName")
<- Collectionを扱う時はcollectionを指定する。

//FirebaseFireStore.instance.collection("collectionName").doc("documentIdName").get()
<- doc()を指定すると、documentIdから中の値が取れる。*返り値はDocumentSnapshot

//FirebaseFireStore.instance.collection("collectionName").get()
<- Future(一度のデータ読み出し？)時にはget()を使う。*返り値はQuerySnapshot

//FirebaseFireStore.instance.collection("collectionName").snapshots()
<- Stream(リアルタイムでデータを更新？)時にはsnapshots()を使う。*返り値はQuerySnapshot

//QueryDocumentSnapshot
<- 複数のドキュメントのデータを持つQuerySnapshotから実際にデータを取得する際には、
一つ一つのドキュメントのデータを持つQueryDocumentSnapshotに対して操作を行う。
参考：https://qiita.com/muijp/items/86a4573fdce800221b72
//fromJson Json -> map型に
//toJson 値->Jsonに
//QueryDocumentSnapshotとDocumentSnapshotの違い
<- QueryDocumentSnapshotは値が存在するのが保証されており、exists()やget()をした時に必ず取れる。
一方DocumentSnapshotはDocumentIDから所得するので、値が存在するかは保証されてない

// MediaQuery.of(context).sizeを使用すると、rebuildが走る

///ユーザー管理の流れ
1.emailとpasswordを入力する
2.確認画面へ遷移して認証確認メールを送る
3.ユーザーが確認リンクを押す
4.認証画面を表示
5.アプリへ戻り確認画面から自動でユーザー情報登録画面にいく
//auth_view_modelの使い方
auth系の状態管理を一通り書いておき、モデルの入れ替えでユーザー管理の流れを実装する

//Streamで変数を扱う時はmapで処理をして中身を参照する。


///ユーザー情報
1.ID (@~的な)
2.名前
3.プロフィール画像
4.現在地

///Firebase Cloud Storage
image_pickerでデバイスからのカメラ情報を持ってくる。

//set関数で定義したmethodは〇〇.〇〇で参照できる

///emailVerifiedが変更されない問題
//一応reload()を走らせると動くが挙動がわからない
//userChanges()を使うといいかもしれない？
//userChanges()を使用してもreload()をしよう使用しないと変更されなかった。
//プロフィール作成ボタンを押してuserの状態をみる

//ユーザー作成がし終わった後にホーム画面に飛ぶ
ホームで現在予定を募集しているユーザーを出す
ユーザーを選択するとユーザーが作った予定の一覧を表示
予定を押すと詳細が見れる
参加ボタンを押すとトークが開始

//友達機能
相手から友達追加がくると待機場所にくる
その間は予定を投稿しても相手には表示されない

//talk機能
talkは予定参加した時のみできる
一度予定に参加したらずっとトークができる訳ではなく１週間ぐらいで期限が切れる
とりあえず、文字のみ

//M1macでの対応

//Local Storage (Shared Preferences) を使うと端末に値を保存できる
